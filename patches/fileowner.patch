Files are created by root now and therefore also owned by root, set the proper ownership.

Patch author: bernd.schubert@fastmail.fm

diff --git a/src/general.c b/src/general.c
--- a/src/general.c
+++ b/src/general.c
@@ -257,3 +257,20 @@ void to_root(void) {
 
 	errno = errno_orig;
 }
+
+/**
+ * Set file owner of after an operation, which created a file.
+ */
+int set_owner(const char *path) {
+	struct fuse_context *ctx = fuse_get_context();
+	if (ctx->uid != 0 && ctx->gid != 0) {
+		int res = lchown(path, ctx->uid, ctx->gid);
+		if (res) {
+			usyslog(LOG_WARNING,
+			       ":%s: Setting the correct file owner failed: %s !\n", 
+			       __func__, strerror(errno));
+			return -errno;
+		}
+	}
+	return 0;
+}
diff --git a/src/general.h b/src/general.h
--- a/src/general.h
+++ b/src/general.h
@@ -27,6 +27,7 @@ int hide_dir(const char *path, int branc
 int hide_dir(const char *path, int branch_rw);
 filetype_t path_is_dir (const char *path);
 int maybe_whiteout(const char *path, int branch_rw, enum whiteout mode);
+int set_owner(const char *path);
 void to_user(void);
 void to_root(void);
 
diff --git a/src/unionfs.c b/src/unionfs.c
--- a/src/unionfs.c
+++ b/src/unionfs.c
@@ -122,10 +122,12 @@ static int unionfs_create(const char *pa
 	if (res) return res;
 
 	res = open(p, fi->flags, mode);
-
 	if (res == -1) return -errno;
 
 	fi->fh = res;
+
+	set_owner(p); // no error check, since creating the file succeeded
+
 	remove_hidden(path, i);
 
 	return 0;
@@ -241,6 +243,8 @@ static int unionfs_link(const char *from
 
 	res = link(f, t);
 
+	set_owner(t); // no error check, since creating the file succeeded
+
 	if (res == -1) return -errno;
 
 	remove_hidden(to, i); // remove hide file (if any)
@@ -268,6 +272,8 @@ static int unionfs_mkdir(const char *pat
 	res = mkdir(p, mode);
 
 	if (res == -1) return -errno;
+
+	set_owner(p); // no error check, since creating the dir succeeded
 
 	return 0;
 }
@@ -301,7 +307,9 @@ static int unionfs_mknod(const char *pat
 	}
 
 	if (res == -1) return -errno;
-	
+
+	set_owner(p); // no error check, since creating the file succeeded
+
 	remove_hidden(path, i);
 
 	return 0;
@@ -503,6 +511,8 @@ static int unionfs_rename(const char *fr
 			maybe_whiteout(from, i, WHITEOUT_FILE);
 	}
 
+	set_owner(to); // no error check, since creating the file succeeded
+
 	remove_hidden(to, i); // remove hide file (if any)
 	return 0;
 }
@@ -576,6 +586,8 @@ static int unionfs_symlink(const char *f
 
 	res = symlink(from, t);
 	if (res == -1) return -errno;
+
+	set_owner(to); // no error check, since creating the file succeeded
 
 	remove_hidden(to, i); // remove hide file (if any)
 	return 0;
